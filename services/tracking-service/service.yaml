Description: >
    This is template creates the task- and service definition of our reactive service.

Parameters: 

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    TargetGroup:
        Description: The reference to the target group
        Type: String

    EventStream:
      Description: The event stream
      Type: String

    RedisHost:
      Description: The Elasticache-endpoint
      Type: String

Resources:
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 2
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            LaunchType: EC2
            Cluster: !Ref Cluster
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers: 
                - ContainerName: "reactive-service"
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup
            NetworkConfiguration:
              AwsvpcConfiguration:
                AssignPublicIp: DISABLED
                SecurityGroups:
                  - !Ref SecurityGroup
                Subnets: !Ref Subnets

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: reactive-service
            NetworkMode: awsvpc
            ContainerDefinitions:
                - Name: reactive-service
                  Essential: true
                  Image: 275396840892.dkr.ecr.eu-west-1.amazonaws.com/reactive-refarch:latest
                  Memory: 2048
                  Cpu: 1024
                  PortMappings:
                    - ContainerPort: 8080
                  Environment: 
                    - Name: REDIS_HOST
                      Value: !Ref RedisHost
                    - Name: EVENT_STREAM
                      Value: !Ref EventStream
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
    
    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 7

    ServiceScalingTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      DependsOn: Service
      Properties:
        MaxCapacity: 4
        MinCapacity: 2
        ResourceId: !Join ['', [service/, !Ref 'Cluster', /, !GetAtt [Service, Name]]]
        RoleARN: !GetAtt [AutoscalingRole, Arn]
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs

    ServiceScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: AStepPolicy
        PolicyType: StepScaling
        ScalingTargetId: !Ref 'ServiceScalingTarget'
        StepScalingPolicyConfiguration:
          AdjustmentType: PercentChangeInCapacity
          Cooldown: 60
          MetricAggregationType: Average
          StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200

    ALB500sAlarmScaleUp:
      Type: AWS::CloudWatch::Alarm
      Properties:
        EvaluationPeriods: '1'
        Statistic: Average
        Threshold: '10'
        AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
        Period: '60'
        AlarmActions: [!Ref 'ServiceScalingPolicy']
        Namespace: AWS/ApplicationELB
        Dimensions:
        - Name: ECSService
          Value: !Ref 'Service'
        ComparisonOperator: GreaterThanThreshold
        MetricName: HTTPCode_ELB_5XX_Count

    # This IAM Role grants the service access to register/unregister with the 
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    
    AutoscalingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService']
              Resource: '*'

    ServiceRole: 
        Type: AWS::IAM::Role
        Properties: 
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies: 
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument: 
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }
