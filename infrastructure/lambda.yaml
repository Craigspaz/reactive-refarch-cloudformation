Description: >
    This template deploys two different Amazon Kinesis Streams we need for the architecture.
    We create them it a seperate nested template, so it can be referenced by all of the other nested templates.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Description: Choose which VPC the Lambda-functions should be deployed to
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Choose which subnets the Lambda-functions should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Description: Select the Security Group to use for the Lambda-functions
    Type: AWS::EC2::SecurityGroup::Id

  DynamoDBTable:
    Description: The DynamoDB-table to store events
    Type: String

  EventStream:
    Description: Name of the event stream
    Type: String

  RedisUpdateStream:
    Description: Name of the update stream
    Type: String

  RedisHost:
    Description: The Elasticache-endpoint
    Type: String

Resources:

  LambdaExecutionRoleDynamoDB:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-LambdaExecutionRoleDynamoDB-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-LambdaExecutionRoleDynamoDB-${AWS::Region}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: arn:aws:dynamodb:*:*:*

  LambdaExecutionRoleRedis:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-LambdaExecutionRoleRedis-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-LambdaExecutionRoleRedisPolicy-${AWS::Region}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub ${EnvironmentName}-LambdaExecutionRoleEC2Policy-${AWS::Region}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

  KinesisConsumerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${EnvironmentName}-KinesisConsumerFunction-${AWS::Region}
      Handler: "com.amazon.KinesisConsumerHandler"
      Role: !GetAtt LambdaExecutionRoleDynamoDB.Arn
      Code: 
        S3Bucket: "smoell-refarch-us-east-1"
        S3Key: "lambda/kinesis-consumer-1.0.jar"
      Runtime: "java8"
      MemorySize: 256
      Timeout: "30"
      Environment: 
        Variables:
          TABLE_NAME: !Ref DynamoDBTable

  RedisUpdateFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${EnvironmentName}-RedisUpdateFunction-${AWS::Region}
      Handler: "com.amazon.RedisUpdaterHandler"
      Role: !GetAtt LambdaExecutionRoleRedis.Arn
      Code: 
        S3Bucket: "smoell-refarch-us-east-1"
        S3Key: "lambda/redis-updater-1.0.jar"
      Runtime: "java8"
      MemorySize: 256
      Timeout: "30"
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: !Ref Subnets
      Environment:
        Variables:
          REDIS_HOST: !Ref RedisHost
          REDIS_PORT: 6379

  EventSourceMappingConsumer: 
    Type: "AWS::Lambda::EventSourceMapping"
    Properties: 
      EventSourceArn:
        Fn::Join: 
          - ""
          - 
            - "arn:aws:kinesis:"
            - 
              Ref: "AWS::Region"
            - ":"
            - 
              Ref: "AWS::AccountId"
            - ":stream/"
            - 
              Ref: "EventStream"
      FunctionName: !GetAtt KinesisConsumerFunction.Arn
      StartingPosition: "TRIM_HORIZON"
      Enabled: True

  EventSourceMappingRedis: 
    Type: "AWS::Lambda::EventSourceMapping"
    Properties: 
      EventSourceArn:
        Fn::Join: 
          - ""
          - 
            - "arn:aws:kinesis:"
            - 
              Ref: "AWS::Region"
            - ":"
            - 
              Ref: "AWS::AccountId"
            - ":stream/"
            - 
              Ref: "RedisUpdateStream"
      FunctionName: !GetAtt RedisUpdateFunction.Arn
      StartingPosition: "TRIM_HORIZON"
      Enabled: True

Outputs:

  KinesisConsumerFunction:
    Description: The ARN of the Kinesis-Consumer Lambda-function
    Value: !Ref KinesisConsumerFunction

  RedisUpdateFunction:
    Description: he ARN of the Redis-Updater Lambda-function
    Value: !Ref RedisUpdateFunction
